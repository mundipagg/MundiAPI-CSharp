/*
 * MundiAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MundiAPI.PCL;
using MundiAPI.PCL.Utilities;
using MundiAPI.PCL.Http.Request;
using MundiAPI.PCL.Http.Response;
using MundiAPI.PCL.Http.Client;

namespace MundiAPI.PCL.Controllers
{
    public partial interface IInvoicesController
    {
        /// <summary>
        /// Cancels an invoice
        /// </summary>
        /// <param name="invoiceId">Required parameter: Invoice id</param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Models.GetInvoiceResponse CancelInvoice(string invoiceId);

        /// <summary>
        /// Cancels an invoice
        /// </summary>
        /// <param name="invoiceId">Required parameter: Invoice id</param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Task<Models.GetInvoiceResponse> CancelInvoiceAsync(string invoiceId);

        /// <summary>
        /// Gets an invoice
        /// </summary>
        /// <param name="invoiceId">Required parameter: Invoice Id</param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Models.GetInvoiceResponse GetInvoice(string invoiceId);

        /// <summary>
        /// Gets an invoice
        /// </summary>
        /// <param name="invoiceId">Required parameter: Invoice Id</param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Task<Models.GetInvoiceResponse> GetInvoiceAsync(string invoiceId);

        /// <summary>
        /// Create an Invoice
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription Id</param>
        /// <param name="cycleId">Required parameter: Cycle Id</param>
        /// <param name="request">Optional parameter: Example: </param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Models.GetInvoiceResponse CreateInvoice(string subscriptionId, string cycleId, Models.CreateInvoiceRequest request = null);

        /// <summary>
        /// Create an Invoice
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription Id</param>
        /// <param name="cycleId">Required parameter: Cycle Id</param>
        /// <param name="request">Optional parameter: Example: </param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Task<Models.GetInvoiceResponse> CreateInvoiceAsync(string subscriptionId, string cycleId, Models.CreateInvoiceRequest request = null);

        /// <summary>
        /// Updates the status from an invoice
        /// </summary>
        /// <param name="invoiceId">Required parameter: Invoice Id</param>
        /// <param name="request">Required parameter: Request for updating an invoice's status</param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Models.GetInvoiceResponse UpdateInvoiceStatus(string invoiceId, Models.UpdateInvoiceStatusRequest request);

        /// <summary>
        /// Updates the status from an invoice
        /// </summary>
        /// <param name="invoiceId">Required parameter: Invoice Id</param>
        /// <param name="request">Required parameter: Request for updating an invoice's status</param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Task<Models.GetInvoiceResponse> UpdateInvoiceStatusAsync(string invoiceId, Models.UpdateInvoiceStatusRequest request);

        /// <summary>
        /// Gets all invoices
        /// </summary>
        /// <param name="page">Optional parameter: Page number</param>
        /// <param name="size">Optional parameter: Page size</param>
        /// <param name="code">Optional parameter: Filter for Invoice's code</param>
        /// <param name="customerId">Optional parameter: Filter for Invoice's customer id</param>
        /// <param name="subscriptionId">Optional parameter: Filter for Invoice's subscription id</param>
        /// <param name="createdSince">Optional parameter: Filter for Invoice's creation date start range</param>
        /// <param name="createdUntil">Optional parameter: Filter for Invoices creation date end range</param>
        /// <param name="status">Optional parameter: Filter for Invoice's status</param>
        /// <param name="dueSince">Optional parameter: Filter for Invoice's due date start range</param>
        /// <param name="dueUntil">Optional parameter: Filter for Invoice's due date end range</param>
        /// <return>Returns the Models.ListInvoicesResponse response from the API call</return>
        Models.ListInvoicesResponse GetInvoices(
                int? page = null,
                int? size = null,
                string code = null,
                string customerId = null,
                string subscriptionId = null,
                DateTime? createdSince = null,
                DateTime? createdUntil = null,
                string status = null,
                DateTime? dueSince = null,
                DateTime? dueUntil = null);

        /// <summary>
        /// Gets all invoices
        /// </summary>
        /// <param name="page">Optional parameter: Page number</param>
        /// <param name="size">Optional parameter: Page size</param>
        /// <param name="code">Optional parameter: Filter for Invoice's code</param>
        /// <param name="customerId">Optional parameter: Filter for Invoice's customer id</param>
        /// <param name="subscriptionId">Optional parameter: Filter for Invoice's subscription id</param>
        /// <param name="createdSince">Optional parameter: Filter for Invoice's creation date start range</param>
        /// <param name="createdUntil">Optional parameter: Filter for Invoices creation date end range</param>
        /// <param name="status">Optional parameter: Filter for Invoice's status</param>
        /// <param name="dueSince">Optional parameter: Filter for Invoice's due date start range</param>
        /// <param name="dueUntil">Optional parameter: Filter for Invoice's due date end range</param>
        /// <return>Returns the Models.ListInvoicesResponse response from the API call</return>
        Task<Models.ListInvoicesResponse> GetInvoicesAsync(
                int? page = null,
                int? size = null,
                string code = null,
                string customerId = null,
                string subscriptionId = null,
                DateTime? createdSince = null,
                DateTime? createdUntil = null,
                string status = null,
                DateTime? dueSince = null,
                DateTime? dueUntil = null);

        /// <summary>
        /// Updates the metadata from an invoice
        /// </summary>
        /// <param name="invoiceId">Required parameter: The invoice id</param>
        /// <param name="request">Required parameter: Request for updating the invoice metadata</param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Models.GetInvoiceResponse UpdateInvoiceMetadata(string invoiceId, Models.UpdateMetadataRequest request);

        /// <summary>
        /// Updates the metadata from an invoice
        /// </summary>
        /// <param name="invoiceId">Required parameter: The invoice id</param>
        /// <param name="request">Required parameter: Request for updating the invoice metadata</param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Task<Models.GetInvoiceResponse> UpdateInvoiceMetadataAsync(string invoiceId, Models.UpdateMetadataRequest request);

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription Id</param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Models.GetInvoiceResponse GetPartialInvoice(string subscriptionId);

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription Id</param>
        /// <return>Returns the Models.GetInvoiceResponse response from the API call</return>
        Task<Models.GetInvoiceResponse> GetPartialInvoiceAsync(string subscriptionId);

    }
} 